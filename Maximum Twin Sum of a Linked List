#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct ListNode {
 int val;
 ListNode* next;
 ListNode(int x) : val(x), next(nullptr) {}
};
ListNode* createList(const vector<int>& values) {
 ListNode* head = new ListNode(values[0]);
 ListNode* current = head;
 for (int i = 1; i < values.size(); ++i) {
 current->next = new ListNode(values[i]);
 current = current->next;
 }
 return head;
}
int pairSum(ListNode* head) {
 vector<int> values;
 ListNode* current = head;
 while (current) {
 values.push_back(current->val);
 current = current->next;
 }
 int maxTwinSum = 0;
 int n = values.size();
 for (int i = 0; i < n / 2; ++i) {
 maxTwinSum = max(maxTwinSum, values[i] + values[n - 1 - i]);
 }
 return maxTwinSum;
}
int main() {
 vector<int> values;
 int value;

 cout << "Enter linked list values (end input with -1): ";
 while (cin >> value && value != -1) {
 values.push_back(value);
 }

 ListNode* head = createList(values);
 cout << "Maximum twin sum: " << pairSum(head) << endl;
 return 0;
}
